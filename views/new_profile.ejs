<% include partials/head %>

<body style = "background-color:#838B88">

<header>
    <h1 style="text-align:center ;color:#0C1311">
        Spotify Audio Features
    </h1>

</header>

<main>
    <% if (user.spotify.enabled!="true") {%>
    <a href="/auth/spotify">this to connect spotify</a>
<%}
    else {%>
    <h3 style="color:#0C1311">The Spotify playlist pool</h3>
    <div style="width: 100%;">
        <div id="spotify_list" style="width:50%; display: inline-block;"></div><div id="recommendations" style="width:50%; display: inline-block; border:2px solid black"><ul>
                <li><a>Recommended song</a></li>
                <li><a>Recommended song</a></li>
                <li><a>Recommended song</a></li>
                <li><a>Recommended song</a></li>
                <li><a>Recommended song</a></li>
                <li><a>Recommended song</a></li>
                <li><a>Recommended song</a></li>
                <li><a>Recommended song</a></li>
                <li><a>Recommended song</a></li>
                <li><a>Recommended song</a></li>

            </ul> </div></div>
    <br><br>
    <div style=" display: block; margin-left: auto;  margin-right: auto;  background-color: 	#114C98; border:2px solid black;width:350px;border-radius: 25px;border-color: #414767;">
        <b style="display:block;text-align:center ;color:#F2F5F4">Spotify controls</b>
        <div id="controls" style="text-align:center">
            <button type="button" id="prev_spotify" class="btn" style="display: inline-block;border-radius: 50%">
                <i class="fa fa-fast-backward"></i>
            </button>
            <button type="button" id="toggle_spotify" class="btn" style="display: inline-block;border-radius: 50%" >
                <i class="fa fa-pause"></i>
                /
                <i class="fa fa-play"></i>
            </button>
            <button type="button" id="next_spotify" class="btn" style="display: inline-block;border-radius: 50%">
                <i class="fa fa-fast-forward"></i>
            </button>

        </div>
        <div class="slidecontainer" style="display: block;margin-left: auto;margin-right: auto; ">
            <input type="range" min="1" max="100" value="50" id="myRange"style="color:#0C1311;display: block;margin-left: auto;margin-right: auto; background-color: 	#114C98; border-color:	#114C98;">
            <p style="display: block;margin-left: auto;margin-right: auto;color:#F2F5F4">Value: <span id="demo"></span></p>
        </div>
    </div>

    <section class="features">
        <ul id="results">
        </ul>
        <div id="features-chart-container">
            <canvas id="features-chart"></canvas>
        </div>
    </section>
</main>

<footer>
    <a href="https://glitch.com/edit/#!/audio-features">
        Remix this in Glitch
    </a>
</footer>
<script src="https://sdk.scdn.co/spotify-player.js"></script>
<script>

    /* globals Spotify */
    // client-side js
    // run by the browser each time your view template is loaded

    var player;

    const LOCALSTORAGE_ACCESS_TOKEN_KEY = "spotify-audio-analysis-playback-token";
    const LOCALSTORAGE_ACCESS_TOKEN_EXPIRY_KEY =
        "spotify-audio-analysis-playback-token-expires-in";
    const accessToken = "<%=user.spotify.access%>";
    //alert(accessToken);

    let deviceId = "";
    var curr_track="";
    const colors = [
        "rgba(30,215,96, 0.9)",
        "rgba(245,115,160, 0.9)",
        "rgba(80,155,245, 0.9)",
        "rgba(255,100,55, 0.9)",
        "rgba(180,155,200, 0.9)",
        "rgba(250,230,45, 0.9)",
        "rgba(0,100,80, 0.9)",
        "rgba(175,40,150, 0.9)",
        "rgba(30,50,100, 0.9)"
    ];

    var img = new Image();

    function binaryIndexOf(searchElement, valueof, valueout) {
        "use strict";

        var minIndex = 0;
        var maxIndex = this.length - 1;
        var currentIndex;
        var currentElement;

        while (minIndex <= maxIndex) {
            currentIndex = ((minIndex + maxIndex) / 2) | 0;
            currentElement = valueof(this[currentIndex]);

            if (
                currentElement < searchElement &&
                (currentIndex + 1 < this.length
                    ? valueof(this[currentIndex + 1])
                    : Infinity) > searchElement
            ) {
                return valueout(currentElement, currentIndex, this);
            }
            if (currentElement < searchElement) {
                minIndex = currentIndex + 1;
            } else if (currentElement > searchElement) {
                maxIndex = currentIndex - 1;
            } else {
                return this[currentIndex];
            }
        }

        return -1;
    }

    const getCurrentAndLastArrayLikes = (arrayLikes, time) =>
    arrayLikes.map(arrayLike =>
    binaryIndexOf.call(
        arrayLike,
        time,
        e => e.start,
        (element, index, array) => [
        array[index],
        array[index > 0 ? index - 1 : 0]
    ]
    )
    );

    const getRowPosition = index =>
    index === 0 ? 0 : 1 / index + getRowPosition(index - 1);

    const getFloorRowPosition = (searchPosition, rowHeight, i = 0, max = 5) =>
    i > max
        ? max
        : searchPosition < getRowPosition(i + 1) * rowHeight
        ? i
        : getFloorRowPosition(searchPosition, rowHeight, i + 1, max);

    function drawAnalysis(data) {
        var element = document.getElementById("features-chart");
        element.parentNode.removeChild(element);
        var p = document.getElementById("features-chart-container");
        var newElement = document.createElement("canvas");
        newElement.setAttribute('id', "features-chart");
        p.appendChild(newElement);

        var featuresChart = document.getElementById("features-chart");
        featuresChart.style.width = featuresChart.offsetWidth;
        featuresChart.width = featuresChart.offsetWidth * 2;
        featuresChart.style.height = featuresChart.offsetHeight;
        featuresChart.height = featuresChart.offsetHeight * 2;

        var width = featuresChart.width;
        var height = featuresChart.height;

        var ctx = featuresChart.getContext("2d");
        ctx.clearRect(0, 0, featuresChart.width, featuresChart.height);
        //alert("dsada");
        var arrayLikesEntries = Object.entries(data)
            .filter(entry => entry[1] instanceof Array)
    .sort((a, b) => a[1].length - b[1].length);

        var arrayLikesKeys = arrayLikesEntries.map(entry => entry[0]);
        var arrayLikes = arrayLikesEntries.map(entry => entry[1]);

        var rowHeight = height / arrayLikes.length;






//click and change the part of song
        featuresChart.addEventListener("click", clickEvent => {
            const time =
                (clickEvent.offsetX / featuresChart.width) * data.track.duration * 2;

        console.log("arraylike: ", arrayLikes[getFloorRowPosition(clickEvent.offsetY * 2, rowHeight)]);
        console.log("pitchstuff: ", arrayLikes[3]);

        console.log(
            "FloorPosition: ",
            getFloorRowPosition(clickEvent.offsetY * 2, rowHeight)
        );

        const kind = getFloorRowPosition(clickEvent.offsetY * 2, rowHeight);
        if (kind == 0) {
            const seekTime = binaryIndexOf.call(
                arrayLikes[kind],
                time,
                e => e.start,
                (element, index) => element
        );
console.log(seekTime + "seek");
            fetch(
                `https://api.spotify.com/v1/me/player/seek?position_ms=${Math.floor(
                    seekTime * 1000
                )}`,
                {
                    method: "PUT",
                    headers: {
                        Authorization: `Bearer ${accessToken}`
                    }
                }
            ).catch(console.log);
        }
    });

//doubleclick for reccomendation
        featuresChart.addEventListener("dblclick", clickEvent => {
            const time =
                (clickEvent.offsetX / featuresChart.width) * data.track.duration * 2;


            console.log(
                "FloorPosition: ",
                getFloorRowPosition(clickEvent.offsetY * 2, rowHeight)
            );

            const kind = getFloorRowPosition(clickEvent.offsetY * 2, rowHeight);
            if (kind == 0) {
                const seekTime = binaryIndexOf.call(
                    arrayLikes[kind],
                    time,
                    e => e.start,
                    (element, index) => element
                );
                console.log("arraylike: ", arrayLikes[getFloorRowPosition(clickEvent.offsetY * 2, rowHeight)]);
                var endtime;
                for (var i=0; i <arrayLikes[getFloorRowPosition(clickEvent.offsetY * 2, rowHeight)].length;i++){
                    if (arrayLikes[getFloorRowPosition(clickEvent.offsetY * 2, rowHeight)][i].start == seekTime) endtime=seekTime+arrayLikes[getFloorRowPosition(clickEvent.offsetY * 2, rowHeight)][i].duration;
                }

                var newArrayLikes= [];
                for (var i=0; i<arrayLikes[3].length;i++){
                    if((arrayLikes[3][i].start<=seekTime)&&(arrayLikes[3][i+1].start>=seekTime)){
                        newArrayLikes[0]=i;
                    }
                    else if((arrayLikes[3][i].start<=endtime)&&(arrayLikes[3][i+1].start>=endtime)){
                        newArrayLikes[1]=i;
                    }
                }
                console.log("pitchstuff2: " + newArrayLikes);

                console.log(seekTime + "   seek   " + endtime);
                $.ajax({
                    url: "https://api.spotify.com/v1/me/player/currently-playing",

                    type: "GET",
                    contentType: "application/json",

                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",

                        Authorization: `Bearer ${accessToken}`
                    },


                    success: function(data) {
                        console.log(data.item.id);
                        $.ajax({
                            url: "https://api.spotify.com/v1/recommendations",

                            type: "GET",
                            contentType: "application/json",

                            headers: {
                                Accept: "application/json",
                                "Content-Type": "application/json",

                                Authorization: `Bearer ${accessToken}`
                            },

                            data: {seed_tracks: data.item.id , limit:100},

                            success: function(data1) {
                                //here we have the 100 songs!!!!!-----------------------------------------------------------------------------------------------

                                console.log(data1);

                                alert(data1.tracks[0]);
                                var send_array=[];
                                for (var i = 0; i<data1.tracks.length;i++){
                                    send_array[i] = data1.tracks[i].id;
                                }
                                alert(send_array);
                                var sender = {rec_songs:send_array, seed_song:data.item.id, seek_time:newArrayLikes[0], end_time:newArrayLikes[1]};
                                console.log("we start hehe" + JSON.stringify(sender));
                                ajaxPost("/spotifyanalysis", sender, function(res) {
                                    res=JSON.parse(res);
                                    alert(res);
                                });

                            }
                        });

                    }
                });

            }
        });





        //arrayLikes.forEach((arrayLike, arrayLikeIndex) => {
        const startY = getRowPosition(0) * rowHeight;
        const arrayLikeHeight = rowHeight / (0 + 1);
        arrayLikes[0].forEach((section, sectionIndex) => {
            ctx.fillStyle = colors[sectionIndex % colors.length];
        ctx.fillRect(
            (section.start / data.track.duration) * width,
            getRowPosition(0) * rowHeight,
            (section.duration / data.track.duration) * width,
            arrayLikeHeight
        );
    });
        const label =
            arrayLikesKeys[0].charAt(0).toUpperCase() + arrayLikesKeys[0].slice(1);
        ctx.fillStyle = "#000";
        ctx.font = `bold ${arrayLikeHeight}px Circular`;
        ctx.fillText(label, 0, startY + arrayLikeHeight);
        //});
        const markerHeight = (getRowPosition(arrayLikes.length) * rowHeight) / 2;
        function provideAnimationFrame(timestamp) {
            player &&
            player.getCurrentState().then(state => {
                ctx.clearRect(0, 0, featuresChart.width, featuresChart.height);
            ctx.drawImage(img, 0, 0);
            ctx.fillStyle = "#000";

            const position =
                (state.position / 1000 / data.track.duration) * width;
            ctx.fillRect(position - 2, 0, 5, markerHeight);

            const currentAndLastArrayLikes = getCurrentAndLastArrayLikes(
                arrayLikes,
                state.position / 1000
            );
            //console.log(currentAndLastArrayLikes);
            const pitchChanges = currentAndLastArrayLikes[3][0].pitches.map(
                (pitch, index) =>
                Math.abs(pitch - currentAndLastArrayLikes[3][1].pitches[index])
        );
            const timbreChanges = currentAndLastArrayLikes[3][0].timbre.map(
                (timbre, index) =>
                Math.abs(timbre - currentAndLastArrayLikes[3][1].timbre[index])
        );

            // Pitch boxes
            const pitchBoxWidth = 60;
            ctx.strokeStyle = "#AAA";
            pitchChanges.forEach((pitchChange, i) => {
                ctx.fillStyle = `hsl(0, 0%, ${pitchChange * 100}%)`;
            ctx.fillRect(
                i * pitchBoxWidth,
                height - 2 * pitchBoxWidth,
                pitchBoxWidth,
                pitchBoxWidth
            );
        });
            timbreChanges.forEach((timbreChange, i) => {
                ctx.fillStyle = `hsl(0, 0%, ${timbreChange * 100}%)`;
            ctx.fillRect(
                i * pitchBoxWidth,
                height - 4 * pitchBoxWidth,
                pitchBoxWidth,
                pitchBoxWidth
            );
        });
            currentAndLastArrayLikes[3][0].pitches.forEach((pitchChange, i) => {
                ctx.fillStyle = `hsl(0, 0%, ${pitchChange * 100}%)`;
            ctx.fillRect(
                i * pitchBoxWidth,
                height - pitchBoxWidth,
                pitchBoxWidth,
                pitchBoxWidth
            );
        });
            currentAndLastArrayLikes[3][0].timbre.forEach((pitchChange, i) => {
                ctx.fillStyle = `hsl(0, 0%, ${pitchChange * 100}%)`;
            ctx.fillRect(
                i * pitchBoxWidth,
                height - 3 * pitchBoxWidth,
                pitchBoxWidth,
                pitchBoxWidth
            );
        });

            window.requestAnimationFrame(provideAnimationFrame);
        })
        .catch(e => {
                console.error("Animation: ", e);
            window.requestAnimationFrame(provideAnimationFrame);
        });
        }
        window.requestAnimationFrame(provideAnimationFrame);
        img.src = featuresChart.toDataURL("png");
    }

    function getAnalysis(id) {
        //id = "5Z01UMMf7V1o0MzF86s6WJ";
        let query = "/analysis?id=" + id;

        return fetch(query)
            .then(e => e.json())
    .then(data => {
            drawAnalysis(data);

    });
    }

    function onSpotifyPlayerAPIReady() {
        player = new Spotify.Player({
            name: "Audio Analysis Player",
            getOauthToken: function(callback) {
                callback(accessToken);
            },
            volume: 0.8
        });

        // Ready
        player.on("ready", function(data) {
            deviceId = data.device_id;
            setTimeout(() => {
                fetch("https://api.spotify.com/v1/me/player", {
                method: "PUT",
                    body: JSON.stringify({
                    device_ids: [data.device_id],
                    play: false
                }),
                    headers: {
                    Authorization: `Bearer ${accessToken}`
                }
            }).catch(e => console.error(e));
        }, 100);
        });
        $.ajax({
            url: "https://api.spotify.com/v1/me/playlists",

            type: "GET",
            contentType: "application/json",

            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${accessToken}`
            },

            success: function(data) {
                console.log(JSON.stringify(data.items[0].name));
                for (i in data.items) {
                    $("#spotify_list").append(
                        '<button  class="lists" value="' +
                        data.items[i].uri +
                        '" >' +
                        data.items[i].name +
                        "</button>"
                    );
                }
            }
        });
        $("#spotify_list").on("click", ".lists", function() {
            var uri = this.value;
            $.ajax({
                url: "https://api.spotify.com/v1/me/player/play?device_id=" + deviceId,

                type: "PUT",
                contentType: "application/json",

                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${accessToken}`
                },

                data: '{"context_uri": "' + uri + '"}',
                success: function(data) {}
            });
        });
        var slider = document.getElementById("myRange");
        var output = document.getElementById("demo");
        output.innerHTML = slider.value;

        slider.oninput = function() {
            player.setVolume(this.value * 0.01).then(() => {
                console.log("Volume updated!");
        });
            output.innerHTML = this.value;
        };
        $("#toggle_spotify").click(function() {
            player.togglePlay().then(() => {
                console.log("Toggled playback!");
        });
        });
        $("#next_spotify").click(function() {
            player.nextTrack().then(() => {
                console.log("Skipped to next track!");
        });
        });
        $("#prev_spotify").click(function() {
            player.previousTrack().then(() => {
                console.log("Set to previous track!");
                player.co
        });
        });
        player.addListener('player_state_changed', state => {
            console.log(state);
          //  alert(curr_track);
            if (curr_track!=state.track_window.current_track.id){

                curr_track=state.track_window.current_track.id;
                getAnalysis(curr_track);

            }
        });
        // Connect to the player!
        player.connect();
    }

    function ajaxPost(url, data, cb) {
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url);
        xhr.setRequestHeader("Content-type", "application/json");
        xhr.onload = function() {
            cb(xhr.responseText);
        };
        xhr.send(JSON.stringify(data));
    }

</script>
<%}%>
</body>
</html>
